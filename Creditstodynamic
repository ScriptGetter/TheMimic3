-- Variables
local Fluent = loadstring(game:HttpGet("https://raw.githubusercontent.com/ApoHikingSociety/Dynamic/refs/heads/main/Library"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://pastebin.com/raw/467J64rb"))()

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

if not LocalPlayer or not LocalPlayer.Character then
    LocalPlayer.CharacterAdded:Wait()
end

local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

local RunService = game:GetService("RunService")

local debounce = false
local function onChatted(message)
    if debounce then return end
    debounce = true
    local normalizedMessage = message:lower():gsub("%s+", "")
    if string.find(normalizedMessage, "dynamic") then
        keypress(0xA3)
    end
    task.wait(1)
    debounce = false
end
LocalPlayer.Chatted:Connect(onChatted)

for i, v in pairs(game.Workspace:GetDescendants()) do
    if v:IsA("ProximityPrompt") then
        v.HoldDuration = 0
    end
end

local function isPlayerAlive()
    return Character and Character:FindFirstChild("Humanoid") and Character.Humanoid.Health > 0
end
LocalPlayer.CharacterAdded:Connect(function(newCharacter)
    Character = newCharacter
    HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
end)
local function executeIfAlive(callback)
    if isPlayerAlive() then
        callback()
    else
        warn("Player is not alive.")
    end
end

--[[local isMovementEnabled = _G.SpeedToggle
local desiredSpeed = _G.SpeedValue
local function getMovementDirection()
    return Character.Humanoid.MoveDirection
end
local function resolveCollisions(currentPosition, nextPosition, moveDirection)
    local halfSize = Vector3.new(1, 2, 1)
    local regionStart = nextPosition - halfSize
    local regionEnd = nextPosition + halfSize
    local region = Region3.new(regionStart, regionEnd)
    local parts = workspace:FindPartsInRegion3WithIgnoreList(region, {Character}, 10)
    for _, part in ipairs(parts) do
        local partPosition = part.Position
        local directionToPart = (partPosition - currentPosition).Unit
        local alignment = directionToPart:Dot(moveDirection.Unit)
        if alignment > 0.5 then
            return currentPosition
        end
    end
    return nextPosition
end
local function onRenderStep()
    if not isMovementEnabled then return end
    local moveDirection = getMovementDirection()
    if moveDirection.Magnitude > 0 then
        local deltaPosition = moveDirection * desiredSpeed * RunService.RenderStepped:Wait()
        local nextPosition = HumanoidRootPart.Position + deltaPosition
        local resolvedPosition = resolveCollisions(HumanoidRootPart.Position, nextPosition, moveDirection)
        HumanoidRootPart.CFrame = CFrame.new(resolvedPosition, resolvedPosition + moveDirection)
    end
end
RunService.RenderStepped:Connect(onRenderStep)]]

-- Main
local Window = Fluent:CreateWindow({
    Title = "Egloo",
    SubTitle = "Halloween Trials Part 3 | Credits To Dynamic This Part!",
    TabWidth = 120,
    Size = UDim2.fromOffset(520, 360),
    Acrylic = false,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.Q
})
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "home" }),
    --Player = Window:AddTab({ Title = "Player", Icon = "user" }),
    Visuals = Window:AddTab({ Title = "Visuals", Icon = "eye"}),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}
local Options = Fluent.Options

local notifiedAIs = {}local function isAIAlive(AIName)
    if notifiedAIs[AIName] then
        return
    end
    local model = workspace.AI:FindFirstChild(AIName)
    if not model then
        Fluent:Notify({
            Title = "Egloo",
            Content = AIName.." died",
            Duration = 3
        })
        notifiedAIs[AIName] = true
    end
end
RunService.Heartbeat:Connect(function()
    isAIAlive("Kabocha")
    isAIAlive("Big Silly")
    isAIAlive("Skintist")
end)
Tabs.Main:AddToggle("Kabocha", {
    Title = "Tp to Kabocha",
    Description = "",
    Default = false,
    Callback = function(Value)
        _G.TpKabocha = Value
        local targetPart = workspace.AI.Kabocha.Pumpkin
        task.spawn(function()
            if not _G.TpKabocha then
                return
            end
            while _G.TpKabocha do
                task.wait()
                if targetPart and HumanoidRootPart then
                    local targetPosition = targetPart.Position
                      local newPosition = Vector3.new(targetPosition.X, targetPosition.Y, targetPosition.Z + 20)
                    HumanoidRootPart.CFrame = CFrame.new(newPosition)
                end
            end
            HumanoidRootPart.CFrame = workspace.MainObjective.Cauldron.Main.CFrame
        end)
    end
})
Tabs.Main:AddToggle("Skintist", {
    Title = "Tp to Skintist",
    Description = "",
    Default = false,
    Callback = function(Value)
        _G.TpSkintist = Value
        local targetPart = workspace.AI.Skintist.Head
        task.spawn(function()
            if not _G.TpSkintist then
                return
            end
            while _G.TpSkintist do
                task.wait()
                if targetPart and HumanoidRootPart then
                    local targetPosition = targetPart.Position
                    local newPosition = Vector3.new(targetPosition.X, targetPosition.Y, targetPosition.Z + 20)
                    HumanoidRootPart.CFrame = CFrame.new(newPosition)
                end
            end
            HumanoidRootPart.CFrame = workspace.MainObjective.Cauldron.Main.CFrame
        end)
    end
})
Tabs.Main:AddToggle("Big Silly", {
    Title = "Tp to Big Silly",
    Description = "",
    Default = false,
    Callback = function(Value)
        _G.TpBigSilly = Value
        local targetPart = workspace.AI["Big Silly"].Pumpkin
        local character = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
        local HumanoidRootPart = character:WaitForChild("HumanoidRootPart")
        task.spawn(function()
            if not _G.TpBigSilly then
                return
            end
            while _G.TpBigSilly do
                task.wait()
                if targetPart and HumanoidRootPart then
                    local targetPosition = targetPart.Position
                    local newPosition = Vector3.new(targetPosition.X, targetPosition.Y, targetPosition.Z + 20)
                    HumanoidRootPart.CFrame = CFrame.new(newPosition)
                end
            end
            HumanoidRootPart.CFrame = workspace.MainObjective.Cauldron.Main.CFrame
        end)
    end
})
Tabs.Main:AddButton({
    Title = "Make Potion",
    Description = "",
    Callback = function()
        local function interactWithItem(part, prompt, HumanoidRootPart)
            if part and prompt then
                HumanoidRootPart.CFrame = part.CFrame
                task.wait(0.18)
                fireproximityprompt(prompt)
                task.wait(0.38)
            else
                warn("BasePart or ProximityPrompt is missing!")
            end
        end
        if Character and HumanoidRootPart then
            if not isPlayerAlive() then
                return
            end
            local ingredients = {
                workspace.MainObjective.Ingredients.Bats,
                workspace.MainObjective.Ingredients.Snakes,
                workspace.MainObjective.Ingredients.Roses,
                workspace.MainObjective.Ingredients.Eyes
            }
            local cauldron = workspace.MainObjective.Cauldron.Main
            for _, ingredientModel in ipairs(ingredients) do
                if ingredientModel then
                    for _, child in ipairs(ingredientModel:GetChildren()) do
                        if child:IsA("BasePart") then
                            child.CanCollide = false
                            local proximityPrompt = child:FindFirstChild("ProximityPrompt")
                            interactWithItem(child, proximityPrompt, HumanoidRootPart)
                        elseif child:IsA("Model") then
                            local basePart, proximityPrompt = nil, nil
                            for _, descendant in ipairs(child:GetDescendants()) do
                                if descendant:IsA("BasePart") then
                                    basePart = descendant
                                elseif descendant:IsA("ProximityPrompt") then
                                    proximityPrompt = descendant
                                end
                                if basePart and proximityPrompt then
                                    break
                                end
                            end
                            if basePart and proximityPrompt then
                                basePart.CanCollide = false
                                interactWithItem(basePart, proximityPrompt, HumanoidRootPart)
                            end
                        end
                    end
                else
                    warn(ingredientModel.Name .. " is empty or does not exist!")
                end
            end
            if cauldron and cauldron:FindFirstChild("ProximityPrompt") then
                cauldron.CanCollide = false
                HumanoidRootPart.CFrame = cauldron.CFrame
                task.wait(0.18)
                fireproximityprompt(cauldron.ProximityPrompt)
                task.wait(0.38)
            else
                warn("Cauldron or its ProximityPrompt is missing!")
            end
        end
    end
})
Tabs.Main:AddButton({
    Title = "Collect Candy",
    Description = "",
    Callback = function()
        executeIfAlive(function()
            local function interactWithItem(item, HumanoidRootPart)
                if item:IsA("MeshPart") and item:FindFirstChild("ProximityPrompt") then
                    HumanoidRootPart.CFrame = item.CFrame
                    task.wait(0.18)
                    fireproximityprompt(item.ProximityPrompt)
                    task.wait(0.38)
                end
            end
            local candyModel = workspace.Candy
            if candyModel and candyModel:FindFirstChild("Candy") then
                HumanoidRootPart.CFrame = candyModel.Candy.CFrame
                task.wait(0.18)
                fireproximityprompt(candyModel.Candy.ProximityPrompt)
                task.wait(0.38)
            elseif not candyModel:FindFirstChild("Candy") then
            end
            if candyModel and candyModel:GetChildren() then
                local candyChildren = candyModel:GetChildren()
                for i, child in ipairs(candyChildren) do
                    if child:IsA("MeshPart") then
                        child.CanCollide = false
                        interactWithItem(child, HumanoidRootPart)
                    end
                end
            end
            HumanoidRootPart.CFrame = CFrame.new(107.056656, 37.057106, 246.335251, 0.903638005, 2.76608443e-08, 0.428297102, -2.91318275e-10, 1, -6.39686775e-08, -0.428297102, 5.76797525e-08, 0.903638005)
        end)
    end
})

--[[local WalkSpeedSection = Tabs.Player:AddSection("WalkSpeed")
WalkSpeedSection:AddToggle("SpeedToggle", {
    Title = "Enabled",
    Default = false
}):OnChanged(function()
    isMovementEnabled = not isMovementEnabled
end)
WalkSpeedSection:AddSlider("SpeedValue", {
    Title = "WalkSpeed",
    Default = 11,
    Min = 11,
    Max = 100,
    Rounding = 0
}):OnChanged(function(Value)
    desiredSpeed = Value
end)]]

local WorldSection = Tabs.Visuals:AddSection("World")
WorldSection:AddToggle("Fullbright", {
    Title = "Fullbright",
    Default = false,
    Callback = function(value)
        local Lighting = game:GetService("Lighting")
        if not Lighting then return end
        if value then
            if not _G.NormalLightingSettings then
                _G.NormalLightingSettings = {
                    Brightness = Lighting.Brightness,
                    ClockTime = Lighting.ClockTime,
                    FogEnd = Lighting.FogEnd,
                    GlobalShadows = Lighting.GlobalShadows,
                    Ambient = Lighting.Ambient
                }
            end
            Lighting.Brightness = 2
            Lighting.ClockTime = 12
            Lighting.FogEnd = 1000000
            Lighting.GlobalShadows = false
            Lighting.Ambient = Color3.fromRGB(255, 255, 255)
        else
            if _G.NormalLightingSettings then
                Lighting.Brightness = _G.NormalLightingSettings.Brightness
                Lighting.ClockTime = _G.NormalLightingSettings.ClockTime
                Lighting.FogEnd = _G.NormalLightingSettings.FogEnd
                Lighting.GlobalShadows = _G.NormalLightingSettings.GlobalShadows
                Lighting.Ambient = _G.NormalLightingSettings.Ambient
            end
        end
    end
})
